<?php

/**
 * @file
 * Contains dyniva_private_message.module.
 */

use Symfony\Polyfill\Mbstring\Mbstring;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\private_message\Entity\PrivateMessageThread;
use Drupal\private_message\Mapper\PrivateMessageMapper;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\dyniva_private_message\OpignoMessageThread;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\private_message\Entity\PrivateMessageInterface;
use Drupal\message\Entity\Message;
use Drupal\message\MessageInterface;
use Drupal\Component\Utility\Html;
use Drupal\lightning_core\OverrideHelper as Override;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function dyniva_private_message_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dyniva_private_message module.
    case 'help.page.dyniva_private_message':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Opigno app for messaging') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function dyniva_private_message_theme() {
  return [
    'dyniva_private_message' => [
      'render element' => 'children',
    ],
    'dyniva_private_message_notification_block' => [
      'template' => 'privatemessage-toolbar',
      'variables' => [
        'new_message_count' => 0,
        'has_create_private_message' => false,
        'first_thread' => false,
        'you_has_new_text' => '',
        'items' => []
      ],
    ],
    'dyniva_private_message_manage_top_block' => [
      'template' => 'privatemessage-manage-top',
      'variables' => [
        'title' => '',
        'can_create' => false
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function dyniva_private_message_form_private_message_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $thread_members = $form_state->get('thread_members');
  // Only add the select if we are in the context
  // of a new message (not in a tread context).
  if (!isset($thread_members)) {
    $current_user = \Drupal::currentUser();

    // Hide the default messaging to field.
    $form['members']['#type'] = 'hidden';

    $target_user_id = \Drupal::routeMatch()->getParameter('user_id');
    $form['users_to_send'] = [
      '#title' => t('Select to send'),
      '#type' => 'entity_autocomplete',
      '#target_type' => 'user',
      '#tags' => TRUE,
      '#weight' => -3,
      '#selection_handler' => 'dyniva_private_message:user'
    ];
    if($target_user_id) {
      $target_user = user_load($target_user_id);
      if($target_user) {
        $form['users_to_send']['#default_value'] = [$target_user];
      }
    }

    if(\Drupal::currentUser()->hasPermission('administer private messages')) {
      $form['type'] = [
        '#title' => t('Private Message Type'),
        '#type' => 'radios',
        '#weight' => -5,
        '#options' => ['person' => t('Person'), 'role' => t('Role'), 'all' => t('All Site')],
        '#default_value' => 'person'
      ];

      $form['allow_reply'] = [
        '#title' => t('Allow reply'),
        '#type' => 'checkbox',
        '#weight' => -4,
      ];

      $options = [];
      $roles = \Drupal::service('entity.manager')->getStorage('user_role')->loadMultiple();
      foreach($roles as $role) {
        if(!in_array($role->id(), ['anonymous', 'authenticated'])) {
          $options[$role->id()] = $role->label();
        }
      }
      $form['users_to_send']['#states'] = [
        'visible' => [
          ':input[name="type"]' => ['value' => 'person']
        ]
      ];
      $form['roles_to_send'] = [
        '#title' => t('Select role'),
        '#type' => 'checkboxes',
        '#options' => $options,
        '#weight' => -2,
        '#states' => [
          'visible' => [
            ':input[name="type"]' => ['value' => 'role']
          ]
        ]
      ];
    }

    if(\Drupal::moduleHandler()->moduleExists('dyniva_message') && \Drupal::currentUser()->hasPermission('set private message notifier')) {
      $form['message_notify'] = [
        '#title' => t('Set Message Notifiers'),
        '#type' => 'checkbox',
        '#weight' => -1,
      ];
      $notifier_manager = \Drupal::service('plugin.message_notify.notifier.manager');
      $plugin_definitions = $notifier_manager->getDefinitions();
      $notifires = [];
      foreach($plugin_definitions as $key => $plugin) {
        $notifires[$key] = $plugin['title'];
      }
      unset($notifires['dyniva_log']);
      unset($notifires['private_message']);

      $default_notifiers = [];
      $config = \Drupal::service('config.factory')->get('dyniva_message.settings');
      if(is_array($config->get('force_notifiers'))) {
        $default_notifiers = $config->get('force_notifiers');
      }

      $form['custom_notifiers'] = [
        '#title' => t('Notifiers'),
        '#type' => 'checkboxes',
        '#options' => $notifires,
        '#default_value' => $default_notifiers,
        '#weight' => -1,
        '#states' => [
          'visible' => [
            ':input[name="message_notify"]' => ['checked' => TRUE]
          ]
        ]
      ];
    }

    $form['message']['widget']['#placeholder'] = t('your message');
    $form['actions']['submit']['#value'] = t('Send');

    // Validation function so we can move the values of the users_to_send
    // to the default messaging module field.
    $form['#validate'][] = 'dyniva_private_message_private_message_add_form_validate_replace_to';
  }

  // Remove default & set custom submit handler.
  $form['#submit'] = ['dyniva_private_message_private_message_add_form_submit'];
  $form['actions']['submit']['#submit'] = ['dyniva_private_message_private_message_add_form_submit'];
  $form['actions']['submit']['#value'] = t('Send');

  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'private_message.private_message_page') {
    // Save current thread id in form storage.
    // For "private_messages" page (not PM thread page).
    $user = \Drupal::currentUser();
    $db_connection = \Drupal::service('database');
    $pm_mapper = new PrivateMessageMapper($db_connection, $user);
    $user = User::load($user->id());
    $thread_id = $pm_mapper->getFirstThreadIdForUser($user);

    $form_state->set('thread_id', $thread_id);
  }
}

/**
 * For validation.
 *
 * Sets the values of the default messaging "to" field with the
 * values of our multiselect.
 */
function dyniva_private_message_private_message_add_form_validate_replace_to(&$form, FormStateInterface $form_state) {
  $selected_type = $form_state->getValue('type');
  $selected_roles = $form_state->getValue('roles_to_send');
  $selected_users = $form_state->getValue('users_to_send');
  $selected_members = $form_state->getValue('members');
  // The select member should be empty at this point,
  // fill it with the users to send.
  if ($selected_type == 'role' && \Drupal::currentUser()->hasPermission('administer private messages')) {
    if(empty($selected_roles) && !is_array($selected_roles)) {
      $form_state->setErrorByName('members', t("Please select role for sending message!"));
      return;
    }
    $selected_users = [];
    $roles = \Drupal::service('entity.manager')->getStorage('user_role')->loadMultiple($selected_roles);
    foreach($roles as $role) {
      $_ids = \Drupal::service('entity.manager')->getStorage('user')->getQuery()->condition('roles', $role->id())->execute();
      $selected_users = array_merge($selected_users, $_ids);
    }
    $selected_users = array_unique($selected_users);
  } elseif($selected_type == 'all' && \Drupal::currentUser()->hasPermission('administer private messages')) {
    $selected_users = \Drupal::service('entity.manager')->getStorage('user')->getQuery()->execute();
    $selected_users = array_values(array_diff($selected_users, [\Drupal::currentUser()->id(), 0]));
  } else {
    // Person
    $selected_users = array_map(function($item) {
      return $item['target_id'];
    }, $selected_users);
  }

  $i = 0;
  foreach ($selected_users as $selected_user) {
    $selected_members[$i]['target_id'] = $selected_user;
    $selected_members[$i]['_weight'] = $i;
    $i++;
  }

  // Update the form state with the values we want.
  $form_state->setValue('members', $selected_members);
  // Send error message if fields are empty.
  $message = $form_state->getValue('message');
  if (empty($selected_members['0']['target_id'])) {
    $form_state->setErrorByName('members', t("Please select user for sending message!"));
  };
  if (empty($message[0]['value'])) {
    $form_state->setErrorByName('message', t("Please enter a message!"));
  }
}

/**
 * Add private message form custom submit handler.
 */
function dyniva_private_message_private_message_add_form_submit(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_obj */
  $form_obj = $form_state->getFormObject();

  $current_user = \Drupal::currentUser();
  /** @var \Drupal\user\UserDataInterface $user_data */
  $user_data = \Drupal::service('user.data');

  $pm_config = \Drupal::config('private_message.settings');
  /** @var \Drupal\private_message\Service\PrivateMessageServiceInterface $pm_service */
  $pm_service = \Drupal::service('private_message.service');

  $form_state->cleanValues();
  /** @var \Drupal\private_message\Entity\PrivateMessageInterface $entity */
  $entity = $form_obj->buildEntity($form, $form_state);

  $entity->save();

  /** @var \Drupal\user\UserInterface[] $members */
  $members = $form_state->get('thread_members');
  $members_ids = [];
  if (!$members) {
    $members_ids = [$current_user->id()];
    foreach ($form_state->getValue('members') as $info) {
      $members_ids []= $info['target_id'];
    }
  }

  $subject = $form_state->getValue('subject');

  // If subject is set, create new thread.
  if ($subject) {
    $private_message_thread = PrivateMessageThread::create();
    $private_message_thread->set('field_pm_subject', $subject);
  }
  else {
    // Try get thread from path.
    $parameters = \Drupal::routeMatch()->getParameters();
    $private_message_thread = $parameters->get('private_message_thread');

    if ($private_message_thread === NULL) {
      $storage = $form_state->getStorage();
      if (isset($storage['thread_id'])) {
        // Get current thread for "private_messages" page (not PM thread page).
        $private_message_thread = PrivateMessageThread::load($storage['thread_id']);
      }
      else {
        // $private_message_thread = $pm_service->getThreadForMembers($members);
        // Gen subject and create new thread.
        $messages = $form_state->getValue('message');
        $subject = '';
        foreach($messages as $message) {
          $subject .= $message['value'];
        }
        $subject = trim(strip_tags(Html::decodeEntities($subject)));
        if(Mbstring::mb_strlen($subject) > 50) {
          $subject = Mbstring::mb_substr($subject, 0, 50).'...';
        }
        $private_message_thread = PrivateMessageThread::create();

        $private_message_thread->set('field_pm_subject', $subject);
        $private_message_thread->set('deny_reply', !$form_state->getValue('allow_reply'));
      }
    } else {
      if(is_numeric($private_message_thread)) {
        $private_message_thread = PrivateMessageThread::load($private_message_thread);
      }
    }
  }

  // Add the new message to the thread and save.
  /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread */
  $private_message_thread->addMessage($entity);

  if($private_message_thread->isNew() && isset($private_message_thread->type)) {
    $private_message_thread->type->value = $form_state->getValue('type');
  }
  $private_message_thread->save(false);

  // Add members
  if($members_ids && $private_message_thread->get('members')->isEmpty()) {
    // batch
    $operations = [];

    $startIndex = 0;
    while($startIndex <= count($members_ids)) {
      $segment = array_slice($members_ids, $startIndex, 100);
      $startIndex += 100;
      $operations[]= [
        'dyniva_private_message_batch_add_member', [
          $private_message_thread->id(),
          $segment
        ]
      ];
    }
    
    $batch = [
      'title' => t('Private message is being sent, please wait...'),
      'operations' => $operations,
      'finished' => 'dyniva_private_message_batch_add_member_finished'
    ];
    batch_set($batch);
    // end batch
  }

  // Send message
  if(\Drupal::moduleHandler()->moduleExists('dyniva_message')) {
    $message = Message::create(['template' => 'private_message', 'uid' => \Drupal::currentUser()->id()]);
    $message->set('private_message', $entity);
    $message->save();
    if($form_state->getValue('message_notify')){
      $uids = [];
      $notifiers = array_keys(array_filter($form_state->getValue('custom_notifiers',[])));
      
      foreach($members_ids as $id) {
        if($id != $message->getOwnerId()){
          $uids[$id] = new Drupal\message_subscribe\Subscribers\DeliveryCandidate([], $notifiers, $id);
        }
      }
      dyniva_message_send_message($entity, $message, [], [
        'uids' => $uids
      ]);
    }else{
      dyniva_message_send_message($entity, $message, [], [
        'disable_notifiers' => ['private_message','dyniva_sms']
      ]);
    }
  }

  // Send the user to the private message page. As this thread is the newest,
  // it wll be at the top of the list.
  $form_state->setRedirect('entity.private_message_thread.canonical', ['private_message_thread' => $private_message_thread->id()]);
}

function dyniva_private_message_batch_add_member($private_message_thread_id, $segment, &$context) {
  $private_message_thread = PrivateMessageThread::load($private_message_thread_id);
  $context['results']['private_message_thread_id'] = $private_message_thread_id;
  foreach($segment as $id) {
    $user = user_load($id);
    $private_message_thread->addMember($user);
    // $private_message_thread->addMemberById($id);
  }
  $private_message_thread->save(false);
  // $context['message'] = t('Running...');
}

function dyniva_private_message_batch_add_member_finished($success, $results, $operations) {
  // 刷新message时间，因为member的默认access time已经超过它，会认为是已读
  $private_message_thread_id = $results['private_message_thread_id'];
  $private_message_thread = PrivateMessageThread::load($private_message_thread_id);
  $private_message_thread->updated = time();
  $private_message_thread->save();
  $messages = $private_message_thread->getMessages();
  if(count($messages) == 1) {
    foreach($messages as $message) {
      $message->created = time();
      $message->save();
    }
  }

  $messenger = \Drupal::messenger();
  if (!$success) {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $messenger->addMessage(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * @see private_message_private_message_thread_view()
 */
function dyniva_private_message_private_message_thread_view_alter(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display
) {
  // Changes 'last_message' view mode to .
  // if 'private_message_thread' view mode is 'preview'.
  if (isset($build['last_message'])
    && $build['#view_mode'] === 'preview') {
    /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $entity */
    $messages = $entity->getMessages();
    $last_message = array_pop($messages);
    // $build['last_message'] = $last_message->created->view('thread_preview');
    if($last_message && isset($build['field_pm_subject'])) {
      unset($build['last_message']);
      $build['field_pm_subject'] = [
        '#prefix' => '<div class="private-message-thread-preview-content">',
        '#suffix' => '</div>',
        'field_pm_subject' => $build['field_pm_subject'],
        'last_message' => $last_message->created->view('thread_preview'),
      ];
      if(!empty($last_message->owner->entity)){
        $build['field_pm_subject']['owner'] = ['#markup' => $last_message->owner->entity->getDisplayName()];
      }
    }
  }

  if($build['#view_mode'] === 'default' && $build['private_messages']) {
    $build['private_messages']['#attached']['drupalSettings']['dyniva_private_message'] = [
      'current_thread_id' => $entity->id()
    ];
    $build['private_messages']['#attached']['library'] = ['dyniva_private_message/private_message_thread'];
    if($entity->hasField('deny_reply') && $entity->deny_reply->value) {
      $build['private_message_form']['#access'] = false;
    }
  }

  // Delete link.
  // if ($display->getComponent('delete_link')) {
  //   $url = Url::fromRoute('dyniva_message.manage.private_message_thread.delete_form', ['private_message_thread' => $entity->id()]);
  //   $build['delete_link']['#url'] = $url;
  // }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function dyniva_private_message_private_message_view_alter(
  array &$build,
  EntityInterface $entity,
  EntityViewDisplayInterface $display
) {
  if($build['#view_mode'] == 'full' && $entity->getOwner()) {
    // User picture.
    if(\Drupal::moduleHandler()->moduleExists('dyniva_core')) {
      $picture = dyniva_core_get_user_picture($entity->getOwner());
      $build['picture'] = [
        '#prefix' => '<div class="user_picture">',
        '#suffix' => '</div>',
        '#markup' => '<img src="'.$picture['picture'].'"/>'
      ];
    }
    if(\Drupal::moduleHandler()->moduleExists('ccms_core')) {
      $picture = ccms_core_get_user_picture($entity->getOwner());
      $build['picture'] = [
        '#prefix' => '<div class="user_picture">',
        '#suffix' => '</div>',
        '#markup' => '<img src="'.$picture['picture'].'"/>'
      ];
    }
    if(isset($build['owner'])) {
      $build['owner'] = [
        '#prefix' => '<div class="field field--name-owner field--type-entity-reference field--label-hidden field__item">',
        '#suffix' => '</div>',
        '#markup' => $entity->getOwner()->getDisplayName()
      ];
    }
    if(isset($build['message'])) {
      $build['message']['#prefix'] = '<div class="message-text-wrapper">';
      $build['message']['#suffix'] = '</div>';
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function dyniva_private_message_preprocess_views_view(&$vars) {
  // Attach js & css to view.
  if (isset($vars['view_array']['#name'])
    && $vars['view_array']['#name'] === 'private_message') {
    $vars['#attached']['library'][] = 'dyniva_private_message/view_private_message';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function dyniva_private_message_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (in_array($view->id(), ['dyniva_private_message', 'private_message']) && in_array($view->current_display, ['block_list', 'block_all', 'block_last', 'page_1'])) {
    // Get all message treads of current user.
    $uid = reset($view->args);
    if (!$uid) {
      $uid = \Drupal::currentUser()->id();
    }
    $threads = OpignoMessageThread::getUserThreads($uid);

    if ($threads) {
      // Get threads delete/access time
      // for whenever deleted threads of current user.
      $db_connection = \Drupal::service('database');
      $query_thread = $db_connection->select('pm_thread_delete_time', 'tdt');
      $query_thread->join('private_message_thread__last_delete_time', 'ldt', 'ldt.last_delete_time_target_id = tdt.id');
      $query_thread->join('pm_thread_access_time', 'tat', 'tat.id = tdt.id');
      $query_thread->fields('ldt', ['entity_id']);
      $query_thread->fields('tat', ['access_time']);
      $query_thread->fields('tdt', ['delete_time'])
        ->condition('tdt.owner', $uid)
        ->condition('tdt.delete_time', 0, '>');
      $threads_times = $query_thread->execute()->fetchAllAssoc('entity_id');

      if ($threads_times) {
        // Get deleted threads for current user.
        $deleted_threads = [];
        foreach ($threads_times as $key => $thread) {
          if ($thread->delete_time > 0) {
            $deleted_threads[] = $key;
          }
        }

        if ($deleted_threads) {
          // Remove deleted threads from threads array.
          $threads = array_diff($threads, $deleted_threads);
        }
      }

      if ($threads) {
        // Add allowed threads to query.
        $query->addWhere('', 'private_message_threads.id', $threads, 'IN');
      }
      else {
        $query->addWhere('', 'private_message_threads.id', [0], 'IN');
      }
    }
  }
}

/**
 * Implements hook_preprocess_private_message_thread().
 */
function dyniva_private_message_preprocess_private_message_thread(array &$variables) {
  $private_message_thread = $variables['private_message_thread'];
  $variables['id'] = $private_message_thread->id();
  // Author.
  $private_messages = $private_message_thread->getMessages();
  if(!empty($private_messages)) {
    $author = $private_messages[0]->getOwner();
    $variables['author'] = $author->getDisplayName();
  }
  if($variables['view_mode'] == 'default') {
    // Members.
    if(isset($private_message_thread->type)) {
      $variables['send_type'] = $private_message_thread->type->value;
      if($private_message_thread->type->value == 'all') {
        $variables['content']['members']['#markup'] = t('All Site');
      }

      // 输出members数量到twig
      $variables['members_count'] = count($private_message_thread->members);
    }

    // Disable text format
    $variables['content']['private_message_form']['message']['widget'][0]['format']['format']['#access'] = false;
  }
}

/**
 * Implements hook_preprocess_private_message().
 */
function dyniva_private_message_preprocess_private_message(&$vars) {
  $private_message_thread = \Drupal::service('private_message.service')->getThreadFromMessage($vars['private_message']);
  $members = $private_message_thread->get('members');
  $owner = $vars['private_message']->getOwner();
  $readcount = \Drupal::service('dyniva_private_message.service')->getReadedCount($private_message_thread->id(), $owner->id(), $vars['private_message']->getCreatedTime());
  $count = count($members)-1;
  $vars['attributes']['class'] = [];
  $vars['my'] = false;
  if ($owner && $owner->id() == \Drupal::currentUser()->id()) {
    $vars['attributes']['class'][] = 'is-my';
    $vars['message_readed'] = $readcount;
    $vars['message_count'] = $count;
    $vars['my'] = true;
  } else {
    $vars['attributes']['class'][] = 'not-my';
  }
}

/**
 * Implements hook_entity_create_access().
 */
function dyniva_private_message_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if(isset($context['entity_type_id']) && $context['entity_type_id'] == 'private_message') {
    if(!$account->hasPermission(('create private message'))) {
      return AccessResult::forbidden();
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_dyniva_message_get_subscribers().
 */
function dyniva_private_message_dyniva_message_get_subscribers(EntityInterface $entity, MessageInterface $message) {
  $uids = [];

  if($entity instanceof PrivateMessageInterface){
    $thread = \Drupal::service('private_message.service')->getThreadFromMessage($entity);
    if($thread) {
      $members = $thread->get('members');
      foreach($members as $id) {
        if($entity->getOwnerId() != $id)
          $uids[$id] = $id;
      }
    }
  }

  return $uids;
}

/**
 * Implements hook_page_attachments().
 */
function dyniva_private_message_page_attachments(array &$page){
  $page['#attached']['library'][] = 'dyniva_private_message/style';
}

/**
 * Implements hook_entity_type_alter().
 */
function dyniva_private_message_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['private_message_thread'])) {
    Override::entityClass($entity_types['private_message_thread'], \Drupal\dyniva_private_message\Entity\PrivateMessageThread::class);
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function dyniva_private_message_field_formatter_info_alter(&$info) {
  if(isset($info['private_message_thread_member_formatter'])) {
    Override::pluginClass($info['private_message_thread_member_formatter'], \Drupal\dyniva_private_message\Plugin\Field\FieldFormatter\PrivateMessageThreadMemberFormatter::class);
  }
}